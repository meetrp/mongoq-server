!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -I$(IDIR) --std=c99$/;"	m
DEPS	Makefile	/^DEPS=common.h config.h mongoq.h$/;"	m
IDIR	Makefile	/^IDIR=.$/;"	m
LOG_FILE	common.h	96;"	d
LOG_MAX_LEN	common.h	95;"	d
MAX_DATA_LEN	mdb.c	22;"	d	file:
MONGO_DB_NAME	config.h	15;"	d
MONGO_SERVER_ADDR	config.h	13;"	d
MONGO_SERVER_PORT	config.h	14;"	d
MQ_CONN_BACKLOG	config.h	20;"	d
MQ_DB_ADDR_ERROR	common.h	/^    MQ_DB_ADDR_ERROR,           \/* error while calling getaddrinfo() *\/$/;"	e	enum:_mq_err_t
MQ_DB_BSON_INVALID	common.h	/^    MQ_DB_BSON_INVALID,         \/* BSON invalid for the given op *\/$/;"	e	enum:_mq_err_t
MQ_DB_BSON_NOT_FINISHED	common.h	/^    MQ_DB_BSON_NOT_FINISHED,    \/* BSON obj has not been finished *\/$/;"	e	enum:_mq_err_t
MQ_DB_BSON_TOO_LARGE	common.h	/^    MQ_DB_BSON_TOO_LARGE,       \/* BSON obj exceeds max BSON size *\/$/;"	e	enum:_mq_err_t
MQ_DB_CONNECT_FAILED	common.h	/^    MQ_DB_CONNECT_FAILED,       \/* mongodb connection failed *\/$/;"	e	enum:_mq_err_t
MQ_DB_INSERT_FAILED	common.h	/^    MQ_DB_INSERT_FAILED,        \/* insert into mongo db failed *\/$/;"	e	enum:_mq_err_t
MQ_DB_IO_ERROR	common.h	/^    MQ_DB_IO_ERROR,             \/* IO error *\/$/;"	e	enum:_mq_err_t
MQ_DB_NAME_SPACE_INVALID	common.h	/^    MQ_DB_NAME_SPACE_INVALID,   \/* name space is not valid *\/$/;"	e	enum:_mq_err_t
MQ_DB_NOT_MASTER	common.h	/^    MQ_DB_NOT_MASTER,           \/* Non-master node *\/$/;"	e	enum:_mq_err_t
MQ_DB_NO_SOCKET	common.h	/^    MQ_DB_NO_SOCKET,            \/* could not create socket *\/$/;"	e	enum:_mq_err_t
MQ_DB_QNAME_TOO_LONG	common.h	/^    MQ_DB_QNAME_TOO_LONG,       \/* queue name is too long *\/$/;"	e	enum:_mq_err_t
MQ_DB_READ_SIZE_ERROR	common.h	/^    MQ_DB_READ_SIZE_ERROR,      \/* response is not the expected len *\/$/;"	e	enum:_mq_err_t
MQ_DB_RUN_COMMAND_FAILED	common.h	/^    MQ_DB_RUN_COMMAND_FAILED,   \/* mongo db run command failed *\/$/;"	e	enum:_mq_err_t
MQ_DB_SOCKET_ERROR	common.h	/^    MQ_DB_SOCKET_ERROR,         \/* other socket error *\/$/;"	e	enum:_mq_err_t
MQ_DB_WRITE_ERROR	common.h	/^    MQ_DB_WRITE_ERROR,          \/* write error *\/$/;"	e	enum:_mq_err_t
MQ_ERR	common.h	/^    MQ_ERR = -1,                \/* generic error type *\/$/;"	e	enum:_mq_err_t
MQ_ERR_STR	common.h	91;"	d
MQ_EV_CREATE_HTTP_SERVER_FAILED	common.h	/^    MQ_EV_CREATE_HTTP_SERVER_FAILED,    \/* creation of httpd server failed *\/$/;"	e	enum:_mq_err_t
MQ_EV_HTTP_SOCKET_BIND_FAILED	common.h	/^    MQ_EV_HTTP_SOCKET_BIND_FAILED,      \/* bind socket with server failed *\/$/;"	e	enum:_mq_err_t
MQ_EV_INIT_FAILED	common.h	/^    MQ_EV_INIT_FAILED,                  \/* event initialization failed *\/$/;"	e	enum:_mq_err_t
MQ_MALLOC_FAILED	common.h	/^    MQ_MALLOC_FAILED,           \/* malloc failed *\/$/;"	e	enum:_mq_err_t
MQ_NTHREADS	config.h	18;"	d
MQ_OK	common.h	/^    MQ_OK = 0,                  \/* all okay *\/$/;"	e	enum:_mq_err_t
MQ_SERVER_PORT	config.h	19;"	d
MQ_SOCK_BINDING_FAILED	common.h	/^    MQ_SOCK_BINDING_FAILED,     \/* binding of a socket failed *\/$/;"	e	enum:_mq_err_t
MQ_SOCK_CREATE_FAILED	common.h	/^    MQ_SOCK_CREATE_FAILED,      \/* create a new socket failed *\/$/;"	e	enum:_mq_err_t
MQ_SOCK_FAILED_TO_LISTEN	common.h	/^    MQ_SOCK_FAILED_TO_LISTEN,   \/* listen failed *\/$/;"	e	enum:_mq_err_t
MQ_SOCK_GET_FLAGS_FAILED	common.h	/^    MQ_SOCK_GET_FLAGS_FAILED,   \/* get flags of socket failed *\/$/;"	e	enum:_mq_err_t
MQ_SOCK_SET_FLAGS_FAILED	common.h	/^    MQ_SOCK_SET_FLAGS_FAILED,   \/* set flags to socket failed *\/$/;"	e	enum:_mq_err_t
MQ_THR_CREATE_FAILED	common.h	/^    MQ_THR_CREATE_FAILED        \/* creating of thread failed *\/$/;"	e	enum:_mq_err_t
NAME_SPC_MAX_LEN	mdb.c	21;"	d	file:
OBJ	Makefile	/^OBJ=mdb.o mongoq.o thread.o$/;"	m
_COMMON_H_	common.h	12;"	d
_CONFIG_H_	config.h	10;"	d
_MONGOQ_H_	mongoq.h	11;"	d
_bool_t	common.h	/^typedef enum _bool_t {$/;"	g
_ev_thread_t	thread.c	/^typedef struct _ev_thread_t {$/;"	s	file:
_mq_err_str	common.h	/^const char* _mq_err_str[] = {$/;"	v
_mq_err_t	common.h	/^typedef enum _mq_err_t {$/;"	g
bool	common.h	/^} bool;$/;"	t	typeref:enum:_bool_t
create_and_bind_socket	thread.c	/^create_and_bind_socket(int port, int* fd)$/;"	f	file:
daemon_quit	mongoq.c	/^bool daemon_quit = false;$/;"	v
db_deinit	mdb.c	/^db_deinit(void *args)$/;"	f
db_init	mdb.c	/^db_init(void)$/;"	f
db_pop	mdb.c	/^db_pop(mongo *conn, const char *qname, char *val)$/;"	f
db_push	mdb.c	/^db_push(mongo *conn, const char *qname, const char *val)$/;"	f
ev_dispatcher	thread.c	/^ev_dispatcher(void *arg)$/;"	f	file:
ev_hdlr	mongoq.h	/^typedef void (*ev_hdlr)(struct evhttp_request *req, void *arg);$/;"	t
ev_thread_t	thread.c	/^} ev_thread_t;$/;"	t	typeref:struct:_ev_thread_t	file:
event_handler	mongoq.c	/^event_handler(struct evhttp_request *req, void *arg)$/;"	f
evt_httpd	thread.c	/^    struct evhttp *evt_httpd;$/;"	m	struct:_ev_thread_t	typeref:struct:_ev_thread_t::evhttp	file:
evt_pthread	thread.c	/^    pthread_t evt_pthread;$/;"	m	struct:_ev_thread_t	file:
false	common.h	/^    false = 0,$/;"	e	enum:_bool_t
main	mongoq.c	/^main(int argc, char **argv)$/;"	f
main_base	mongoq.c	/^static struct event_base *main_base = NULL;$/;"	v	typeref:struct:event_base	file:
mongo_to_mq	mdb.c	/^mongo_to_mq(int mongo_err)$/;"	f	file:
mq_err_t	common.h	/^} mq_err_t;$/;"	t	typeref:enum:_mq_err_t
mq_log	log.c	/^void mq_log(const char *log_level, const char *fname, const char *func,$/;"	f
mqdbg	common.h	108;"	d
mqdbg	common.h	111;"	d
mqerr	common.h	103;"	d
mqlog	common.h	101;"	d
mqwarn	common.h	105;"	d
setnonblock	thread.c	/^setnonblock(int fd)$/;"	f	file:
sig_handler	mongoq.c	/^sig_handler(int sig_no)$/;"	f	file:
thread_init	thread.c	/^thread_init(int nthreads, ev_hdlr handler_fn, struct event_base *ev_base)$/;"	f
true	common.h	/^    true = 1$/;"	e	enum:_bool_t
